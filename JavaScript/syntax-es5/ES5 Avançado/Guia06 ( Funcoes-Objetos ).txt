/*************** Funções Objetos ****************/
Funções estão dentro do tipo de variáveis Objeto.
    Elas podem ser armazenadas em variáveis;
    podem ser invocadas por variáveis,
    podem ser o retorno de funções.

Funções chamadas por outras funções são chamadas de funções callback;

Uma função callback é uma função passada a outra função como argumento, 
que é então invocado dentro da função externa para completar algum tipo de rotina ou ação.
                                                                                    
exemplo funcao callback:                                                            
_____________________________________________________________________________________
function percorreArray( vetor, funcaoCallback ){                                    |
    var vetorResposta = [];                                                         |
    for ( var i = 0; i < vetor.length; i++ ){                                       |
        //método push do constructor de Array, adiciona elemento no final           |
        // vetorResposta.push( funcaoCallback( vetor[ i ] ) );                      |
        vetorResposta[ i ] = funcaoCallback( vetor[ i ] );                          |
    }                                                                               |
                                                                                    |
    return vetorResposta;                                                           |
}                                                                                   |
                                                                                    |
//funcao que calcula a idade de um elemento de um array                             |
function calculaIdade( elemento ){                                                  |
    return 2019 - elemento;                                                         |
}                                                                                   |
                                                                                    |
//funcao callback de calcular idade: calculaIdade [ sem parenteses ]                |
var idades = percorreArray( anos, calculaIdade );                                   |
____________________________________________________________________________________|

Funções callback podem ser síncronas:

Síncrono refere-se a comunicação em tempo real onde cada parte recebe ( e se necessário, processa e responde) 
mensagens instantaneamente (ou o mais próximo possível do instantâneo).

Um exemplo humano é o telefone  — durante uma chamada telefônica você costuma responder para outra pessoa imediatamente.

Muitos comandos de programação são também síncronos — por exemplo quando você digita um cálculo, o ambiente irá 
 retornar o resultado para você instantaneamente, a menos que você programe para não fazer.

ou assíncrono:
São utilizados para continuar a execução do código após uma operação assíncrona ser terminada. Chamado de assynchronous callback.

Exemplo:
Simples exemplo maps-example.html (veja uma versão "live" aqui) usa o Google Maps API e a API de geolocalização para mostrar 
em um mapa a localização atual do nosso dispositivo.

Como obter as coordenadas atuais do nosso GPS é uma ação assíncrona (nós não sabemos exatamente quando os dados serão retornados),
 o método Geolocation.getCurrentPosition() pega uma função callback anônima como um parametro, que pega os dados retornados da coordenada
 como parâmetro. Essa função só é executada quando os dados da coordenada são retornados.

Para mais informações sobre funções callback:
https://pt.stackoverflow.com/questions/27177/o-que-%C3%A9-callback
https://developer.mozilla.org/pt-BR/docs/Glossario/Callback_function
https://imasters.com.br/desenvolvimento/entendendo-funcoes-callback-em-javascript

Sincrono:
https://developer.mozilla.org/pt-BR/docs/Glossario/Sincrono
______________________________________________________________________________________________________________________________________________________

Funções Anonimas:
Funções que não tem um nome especificado. A função fica registrada em uma variável, um objeto de função anonima.
Dessa forma, podemos passar uma função como um objeto qualquer, atribuindo-a a uma variavel, independente de haver um nome ou não.

exemplo:

var nomeVariavel = function(parametro1, parametro2){
    return parametro1 + parametro2;
}

Qual a finalidade de uma função anonima?
Proteger variáveis contra mal uso. Equivalente a criar membros privados.

Exemplo com função anonima recursiva para o calculo do numero de fibonacci:

var fibonacci = ( function() {
    var funcao = function( numero ) {
       if( num === 1 || num === 2 )
           return 1;
       else
           return funcao( numero - 1 ) + funcao( numero - 2 ); 
    };

    return funcao;

} )();

Desta forma, não é possível alterar a variavel funcao, pois ela está dentro do escopo da variavel fibonacci. 
Ao chamar uma função anonima, sua referência se perde. 

Sintaxe de função anonima:
var objeto = ( function(){
    //declarações protegidas
    var variavel1, variavel2, ..., variavelN;

    //retornando objeto criado a partir das variáveis acima dentro do escopo 
    return objeto;

})();

Funções anonimas, podem ter opcionalmente nomes, para facilitar recursividade, ou em debugger para identificar a função em stack traces
Exemplo:

var fatorial = function fat( numero ){
    if( numero === 1 ){
        return 1;
    
    }else{
        return numero * fat( numero - 1 );
    }
}

Exemplo de funções que retornam funcoes anonimas:
_________________________________________________________________________________________
var perguntaEntrevista = function( profissao ) {                                        |
                                                                                        |
    //Se a profissao for professor                                                      |
    if( profissao === "professor" ){                                                    |
                                                                                        |
        //retornamos uma função anonima com parametro nome                              |
        return function( nome ){                                                        |
            console.log( "E ai mestre " + nome + ", você leciona qual disciplina?" );   |
        }                                                                               |
                                                                                        |
    }else if( profissao === "desenvolvedor" ){                                          |
                                                                                        |
        return function( nome ){                                                        |
            console.log( nome + " tu desenvolve o que, e em qual linguagem? " );        |
        }                                                                               |
                                                                                        |
    }else if( profissao === "design" ){                                                 |
                                                                                        |
        return function( nome ){                                                        |
            console.log( nome + ", você é capaz de explicar o que é UX? " );            |
        }                                                                               |
                                                                                        |
    }else if( profissao === "bibliotecaria" ){                                          |
                                                                                        |
        return function( nome ){                                                        |
            console.log( nome + ", já catalogou quantos livros hoje? " );               |
        }                                                                               |
                                                                                        |
    }else {                                                                             |
                                                                                        |
        return function( nome ){                                                        |
            console.log( "Ola, " + nome + " o que você faz?" );                         |
        }                                                                               |
    }                                                                                   |
}                                                                                       |
                                                                                        |
var perguntaProfessor = perguntaEntrevista("professor")("Valeria");                     |
                                                                                        |
var pergunta = perguntaEntrevista()("Ze tuberculo");                                    |
                                                                                        |
var perguntaBibliotecaria = perguntaEntrevista("bibliotecaria")("Renata");              |
________________________________________________________________________________________|

______________________________________________________________________________________________________________________________________________________
Immediately Invoked Function Expressions ( IIFE )

O que é?
É uma função em javascript que é executada assim que definida.

É um Design Pattern também conhecido como Self-Executing Anonymous Function e contém duas partes principais. 

- A primeira é a função anônima cujo escopo léxico é encapsulado entre parênteses. Isso previne o acesso externo às variáveis 
 declaradas na IIFE, bem como evita que estas variáveis locais poluam o escopo global.

- A segunda parte corresponde à criação da expressão (), por meio da qual o interpretador JavaScript avaliará e executará a função.


Exemplo:
( function (){
    var nome = "Luiz";
//    consoloe.log( nome );
})();

console.log( nome );    // da erro, pois a variável é local/privada dentro do escopo da declaração da função

atribuindo uma IIFE a uma variável não armazena a função em si, mas o resultado que ela retorna.

Exemplo:
var resultado = ( function( num1, num2 ) {
    return num1 * num2;
})( 2, 5 );

console.log( resultado )    //resposta: 10;

Utilizamos o IIFE para tornar o escopo interno da função inacessivel a programas externos,
tornando variáveis e métodos privados. Apenas métodos e variáveis internos  



para mais informações:
https://imasters.com.br/front-end/sobre-funcoes-imediatas-javascript-iife
https://developer.mozilla.org/pt-BR/docs/Glossario/IIFE


______________________________________________________________________________________________________________________________________________________
Closure:
    
    O que é?
        - É uma função que tem acesso ao escopo da função pai, mesmo após a função pai já tiver fechada.

        Exemplo:
            function aposentadoria( idadeMinima ){
                var texto = " anos para se aposentar. ";

                //Closure
                return function( anoNascimento ){
                    var idade = 2019 - anoNascimento;
                    console.log( "Faltam " + ( idadeMinima - idade ) + texto );
                }
            }

        função aposentadoria é a função pai.
        esta função está retornando outra função
        esta função retornada tem acesso a todas as variaveis do escopo da função pai
        neste exemplo, utilizamos a variavel idadeMinima que foi parametro passado para a função pai.

    Por que utilizamos Closure?
        Permite que funções tenham variáveis privadas.

        Exemplo:
        var add = ( function( ){
            var contador = 0;

            return function(){
                contador++;
                console.log( contador );
                return contador;
            }

        })();

        a variável contador é privada e específica ao escopo da função anonima.
        Essa função retorna uma outra função( filha ) que incrementa esta variável pertencente a função (pai) anterior. 


    Outro exemplo: 
        utilizando o princípio de closure para implementar um objeto Pessoa com métodos e propriedades privadas:

        function Pessoa( salario ){
            
            //Variaveis e métodos privados:
            this.salario = salario;

            function setSalario( salarioNovo ) {
                this.salario = salarioNovo;
            };

            // Só posso usar internamente
            // setSalario( salario );

            // Variaveis e métodos públicos:
            return {

                //Função getSalario() é publica e pode ser executada fora do objeto pessoa
                getSalario() {
                    return salario;
                }        

            }

        }
        let luiz = new Pessoa( 2200 );

        console.log( luiz );

        // Por mais que eu consiga alterar o salario publicamente abaixo
        luiz.salario = 500;
        console.log( luiz.salario );

        // Da erro, é uma função privada
        // luiz.setSalario( 1200 );

        //A variavel privada permanece intacta
        console.log( luiz.getSalario() );


Para mais informações:
    https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Closures
    https://www.w3schools.com/js/js_function_closures.asp
    https://pt.stackoverflow.com/questions/1859/como-funcionam-closures-em-javascript
    