Pré requisito para Module Patterns ou Closure Patterns:

Em javascript, sempre que uma função é invocada
um novo contexto de execução é criado e adicionado a uma pilha
global de cotexto de execução que está sendo executada:

1: executamos uma função;
2: Criado um novo contexto de execução específico para funcao;
3: ( 2 ) é adicionado a pilha de contexto de execução global do interpretador

    1:                           2:                             3:
funcao()    ->  [ contexto de execução da função ]  ->  [                   ]
                                                        [                   ]
                                                        [        2          ]
                                                        [   Contexto Global ]
                                                        [       PILHA       ]

A medida que esses contextos de execução são criados ( 2 ) por invocação de 
funções elas são executadas apenas no passo 3, após chegar a sua vez na pilha
lembrando que a estrutura de dados de uma pilha remove apenas o elemento que está no topo
sendo assim, a medida que outras funções são invocadas para serem executadas elas vão entrando
acima das outras, consequentemente são executadas primeiro.

Um erro comum que podemos notar com esses processos ao desesnvolver é:

function a(){
    a();
}

a();

a função "a()" é invocada e fica se invocando a partir de então recursivamente. 
Como a pilha de execução de contexto global tem um espaço reservado 
finito, ocorre um erro comum chamado: "Maximum call stack size exceeded"
ou seja, tamanho maximo da pilha foi excedido.
Overflow.

Ambiente Lexico:



fonte: https://medium.com/better-programming/execution-context-lexical-environment-and-closures-in-javascript-b57c979341a5

