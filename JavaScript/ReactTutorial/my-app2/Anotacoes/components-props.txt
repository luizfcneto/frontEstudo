Props:
    É uma variável ( objeto ) que é passado como parametro para um Componente;

    Esse objeto é nada mais nada menos que um conjunto de variaveis encapsuladas que 
    são genericamente fornecidas ao Componente como parametros/argumentos ao ser
    declarado. São "requisitos minimos para criar o componente, caso seja necessário para este", para mais informações leia o documento abaixo.

Components and Props:

Componentes permitem separar a interface de usuário de forma independente em pedaços reutilizaveis, sendo cada Componente um pedaço isolado.

Conceitualmente componentes são como funções em javascript. Aceitam inputs ( argumentos/parametros ) arbitrarios ( chamados de "props" ) e 
retornam elementos react descrevendo como eles devem aparecer na tela.

____________________________________________________________FUNÇÃO e CLASSE Componente____________________________________________________________
Exemplo:
//ES5
function Welcome( props ){
    return <h1> Olá, { props.name } </h1>;
}

A função acima é um componente react válido, porque aceita um único "props" como argumento/parametro ( que representa propriedades )
de um objeto com dados e retorna um elemento react. Podemos chamar componentes por funções componentes, pois são literalmente funções
javascript

//ES6   
class Welcome extends React.Component{
    render(){
        return <h1> Hello, { this.props.name } </h1>;
    }
}

Os dois componentes acima são equivalentes pelo ponto de vista do React
Classes possuem caracteristicas adicionais, falaremos mais futuramente.


____________________________________________________________RENDERIZANDO um COMPONENTE____________________________________________________________
Antes sabiamos que elementos React representam tags do DOM:
const element = <div />;

Entretanto, elementos também são capazes de representar componentes definidos por usuários:
const element = <Welcome name="Sara" />;

Quando o React vê um elemento representando um componente definido por usuário, ele passa atributos JSX para este componente como um único objeto
Este objeto é chamado de "props" ( propriedades )

Exemplo:
function Welcome( props ){
    return <h1> Hello, { props.name } </h1>
}

const element = <Welcome name="Sara" />;
ReactDOM.render(
    element,
    document.getElementById( "root" )
);

Explicando o código acima:
    1- Chamamos o método ReactDOM.render() com os parametros element e document.getElementById( "root" );
        element é a função componente que representa <Welcome name="Sara" />
        o segundo parametro é o destino/localização de onde este elemento será "injetado", exibido
    
    2- React chama o componente Welcome com { name: "Sara" } como parametro props ( objeto de argumento/parametro da função componente );

    3- A função componente / Componente Welcome retorna <h1> Hello, Sara </h1> como resultado 

    4- ReactDOM "eficientemente" atualiza o DOM correspondendo com <h1> Hello, Sara </h1>

OBS: 
    Sempre inicie o nome de um componente com letra Maiuscula.
    Por padrão os componentes React que começam com letra minuscula são tratados como tags do DOM.
    Para saber mais sobre essa convenção leia:
    https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized

____________________________________________________________COMPONENTES de COMPOSICAO____________________________________________________________
Componentes são capazes de referenciar outros componentes em sua saída. Isso nos permite usar a mesma abstração de componente para qualquer
nível de detalhamento. Exemplificando, um botão, um formulário, um chat, uma tela em uma aplicação React são todos comumente expressados
por componentes.

Exemplo:
//ES5
function Welcome( props ){
    return <h1> Hello, { props.name } </h1>;
}

function App(){
    return (
        <div>
            <Welcome name="Sara" />
            <Welcome name="Cahal" />
            <Welcome name="Edite" />
        </div>
    );
}

ReactDOM.render(
    <App />,
    document.getElementById("root");
)

Neste exemplo nós temos um Componente renderizado inicialmente, App, e este retorna uma div contendo outro Componente, o Welcome
Tipicamente, novas aplicações React tem um único Componente ( App ) no topo ( raiz ). Entretanto, se nós integrarmos React
em uma aplicação existente, nós devemos começar de baixo para cima ( bottom-up ) com pequenos componentes como botão ( Button )
e gradualmente a partir dele trabalhar na hierarquia superior de visualização/exibição. 

____________________________________________________________EXTRAINDO COMPONENTES____________________________________________________________
Não tenha medo de separar componentes em pequenos componentes

Exemplo: Vamos considerar o componente abaixo:
____________________________________________________________Inicial____________________________________________________________
function Comment( props ){
    return (
        <div className="Commment">

            <div className="UserInfo">
                <img className="Avatar" src={ props.author.avatarUrl } alt={ props.author.name } />
                <div className="UserInfo-name"> { props.author.name } </div>
            </div>

            <div className="Comment-text"> { props.text } </div> 
            
            <div className="Comment-date"> { formatDate( props.date ) </div>
        </div>    
    );
}
______________________________________________________________________________________________________________________________

Ele aceita author ( objeto ), texto ( string ) e data ( date ) como props ( argumento, parametro ) e descreve um comentário em um site 
de midia social.

Esse componente é complicado de mudar por causa do aninhamento e isso é dificil de reutilizar como parte individual, Vamos extrai-los mesmo assim:
Extraindo o Avatar:

function Avatar( props ){
    return(
        <img className="Avatar"> src={ props.user.avatarUrl } alt={ props.user.name }
    );
}


O Componente Avatar não precisa saber que está sendo renderizado dentro do Componente Comment. 
Isso é porque nós modificamos o props fornecido a ele com um nome mais generico: user ao invés de author

É recomendado nomear o props pela perspectiva de vista do próprio componente ao inves do contexto em que ele está inserido.

____________________________________________________________Modificando Componente Avatar____________________________________________________________
function Comment( props ){
    return(
        <div className="Comment">
            <div className="UserInfo">
                <Avatar user={ props.author } />
                <div className="UserInfo-name"> { props.author.name } </div>
            </div>

            <div className="Comment-text"> { props.text } </div> 

            <div className="Comment-date"> { formatDate( props.date ) } </div> 
        </div>
    );
}______________________________________________________________________________________________________________________________________________________


O próximo que modificaremos será o componente UserInfo que renderiza o Avatar próximo ao nome do usuário:
function UserInfo( props ){
    return(
        <div className="UserInfo">
            <Avatar user={ props.user } />
            <div className="UserInfo-name"> { props.user.name } </div>
        </div>
    );
}

____________________________________________________________Componente Comment FINAL____________________________________________________________________

function Comment( props ){
    return(
        <div className="Comment">
            <UserInfo user={ props.author } />
            <div className="Comment-text"> { props.text } </div>
            <div className="Comment-date"> { formatDate( props.date ) } </div>
        </div>
    );
}

_________________________________________________________________________________________________________________________________________________________
A extração de componentes pode parecer trabalhoso inicialmente, mas tendo uma coletanea de componentes reutilizaveis é muito mais vantajoso
para aplicações grandes. Uma boa regra geral para extrair componentes é se parte da interface do usuário será utilizada varias vezes ( botão, painel, Avatar )
ou se é complexo somente por si só ( App, FeedStory, Comment ) são bons candidatos para serem componentes reutilizaveis, portanto devem ter essa atenção maior
para extração de componentes

____________________________________________________________PROPS SÃO SOMENTE PARA LEITURA____________________________________________________________
Sempre quando nós declaramos um Componente como uma função ou classe, ele nunca poderá modificar seus props ( propriedades/parametros )
Considere a função a seguir:
function sum( a, b ){
    return a + b;
}

Essas funções são chamadas de "puras" porque eles não permitem alterar seus inputs ( parametro/argumento ) e sempre retorna o mesmo resultado para os mesmos
 inputs ( parametros/argumentos );

Por contraste, essa função a seguir é impura, pois ela mesma altera o próprio input ( parametro/argumento )
function withdraw( account, amount ){
    account.total -= amount;
}

React é muito flexivel, mas ele tem apenas uma regra rígida:
TODOS OS COMPONENTES AGEM COMO FUNÇÕES PURAS RESPEITANDO SEUS PRÓPRIOS PROPS ( argumentos/parametros )

claro que aplicações com Interfaces de Usuarios ( UIs ) são dinamicas e alteram a todo tempo. Para esse tipo de modificação, utilizaremos outro conceito
states ( estados ) 

referencia: https://reactjs.org/docs/components-and-props.html