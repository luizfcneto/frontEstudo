PLEASE READ: Changes to the Project API
üëâ In the next lecture, I will introduce the food2fork API, which I use to build the project in this section.

However, as of November 30th, this API unfortunately no longer works. I decided to build my own API based on the food2fork API, which is simply called forkify-api.

This is the API that you should use to build the project in this section (I use the original food2fork API in the videos). Don't worry, everything will work almost exactly as in the videos!

So, most of the information in the next video is still relevant because the forkify-api works almost exactly as food2fork, so please just follow the next video, and of course the rest of the project.



üëâ Here are the 3 things that you need to know about forkify-api which are DIFFERENT from the food2fork API in the videos:

1) No API key is required;

2) No proxy is required;

3) The URL is forkify-api.herokuapp.com (click for basic documentation).



üëâ This is how you use forkify-api instead of the food2fork API.

In the Search.js file (as soon as you get there), just replace:

const res = await axios(`${PROXY}http://food2fork.com/api/search?key=${KEY}&q=${this.query}`);
with this:

const res = await axios(`https://forkify-api.herokuapp.com/api/search?&q=${this.query}`);


Then, in Recipe.js (as soon as you get there), please replace:

const res = await axios(`${PROXY}http://food2fork.com/api/get?key=${KEY}&rId=${this.id}`);
with this:

const res = await axios(`https://forkify-api.herokuapp.com/api/get?rId=${this.id}`);


üëâ That's it, that's all you need to know. Again, make these changes as you go through the projects. For now, just keep following the videos. And now, have fun with the project üòò


// Forkify API 

teste consulta api:
//url: https://forkify-api.herokuapp.com/api/

// API com 2 requests: ( S√≥ aceita requisi√ß√£o do tipo GET ) 
    //2.1 => Search ( url + search?q="value" )
    //2.2 => rId ( receitas espec√≠ficas de um ID -> url + get?rId="value" )

const url = "https://forkify-api.herokuapp.com/api/";

// async function search( value ){
    
//     try{
//         let response = await fetch( `${ url }search?q= + ${ value } ` );
//         if( response.status === 200 ){
//             let data = await response.json();
//             console.log( data.recipes[ 0 ].recipe_id );
//         }

//     }catch( e ){
//         console.log( e );
//     }
    
    
// }

// async function getRecipe( id ){
//     try {
//         let response = await fetch( `${ url }get?rId=${ id }` );
        
//         if( response.status === 200 ){
//             let data = await response.json();
//             data.recipe.ingredients.forEach( ( element ) => {
//                 console.log( element );
//             });
//         }

//     }catch( error ) {
//         console.log( error );
//     }

// }

// search( "pizza" );

// getRecipe( 47746)


// Fazendo requisi√ß√µes com axios
import axios from "axios";

async function search( query ) {
    
    // requisi√ß√µes get com axios ( retornam diretamente JSON ) tratamento de Promise.
    // try {
    //     axios.get(`${url}search?q=${query}`)
    //     .then( ( response ) => {
    //         if( response.status === 200 ) {
    //             console.log( response.data );

    //         }
    //     } )
    // }catch( error ) {
    //     console.log( error );
    // }
    
    // requisi√ß√µes get com axios ( retornam diretamente JSON ) tratamento com await
    try{
        const res = await axios.get( `${url}search?q=${query}` );
        if( res.status === 200 ){
            console.log( res.data );

        }else{
            console.log( `Status da requisi√ß√£o: ${ res.status }` )
        }
        
    }catch( error ){
        console.log( error );
    }
    
}

search( "pizza" );

