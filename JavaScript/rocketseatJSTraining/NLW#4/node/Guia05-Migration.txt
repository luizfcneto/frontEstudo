Migration:
    Superficialmente É um histórico de alterações e criações de tabelas de banco de dados que foram executadas no projeto para que todos os usuários/desenvolvedores tenham acesso ao "mesmo" banco de dados ao inicalizar a aplicação.

https://cloud.google.com/solutions/database-migration-concepts-principles-part-1#:~:text=Database%20migration%20is%20the%20process,restructured%2C%20in%20the%20target%20databases.

0 - Utilizaremos o cli do  TypeORM para fazer as migrations
    Como já configuramos o TypeORM previamente, já temos a dependencia dele instalado no nosso projeto.

    CLI é um acronimo para Command Line Input. No nosso caso, utilizaremos linhas de comando para criar as migrations no nosso projeto.


1 Passo: Criar um comando de uma migration:
    no package.json, no atributo "scripts" que faça o comando:
    "typeorm": "ts-node-dev node_modules/typeorm/cli.js"


2 Passo: Olhar documentação para criar migrations:
    https://typeorm.io/#/migrations

    adicionar no script do package.json:
    "scripts": {
        "typeorm": "node --require ts-node/register ./node_modules/typeorm/cli.js"    
    }

    Comando para executar o script typeorm:
    npx typeorm

    Comando para criar uma nova migration:
    npx typeorm migration:create -n "NomeMigration"
    // Comando acima irá criar o arquivo de migration na raiz do projeto. Para definirmos qual pasta de destino, devemos incluir no arquivo ormconfig.json a propriedade:
    "cli": {
        "migrationsDir": "./src/diretorio-destino"
    }

    fonte: https://github.com/typeorm/typeorm/blob/master/docs/using-cli.md#create-a-new-migration
    
    Comando para executar as migrations que criamos:
    npm run typeorm migration:run

    Utilizaremos o software Beekeeper para monitorar as migrations Criadas e executadas pelo comando acima. 

    Comando para desfazer a ultima execução de migration executada:
    npm run typeorm migration:revert

Após execução do comando para criar uma nova migration, será criado um arquivo "identificador-NomeMigration.ts";
contendo a seguinte estrutura:
_____________________________________________________________________________
import {MigrationInterface, QueryRunner, Table} from "typeorm";

export class NomeMigrationIdentificador implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
    }

}
_____________________________________________________________________________
Como podemos notar, a classe NomeMigrationIdentificador implementa uma interface de um objeto MigrationInterface implementado no módulo typeorm.
 
Essa interface possui dois métodos que devem ser implementados:
up():   
    utilizamos um comando do migration para ser executado
    npm typeorm migration:run

    Aqui implementaremos a criação da Tabela ( CREATE )

down():     
    utilizamos um comando do migration para ser executada
    npm typeorm migration:revert

    Aqui implementaremos para a tabela seja excluida ( DROP )


OBS: os métodos acima são executados de forma assíncrona, portanto devolvem uma Promisse

Além de implementar a interface MigrationInterface, o arquivo importa outras duas dependências na classe NomeMigrationIdentificador:

QueryRunner:
    é um objeto que implenta interface que utilizamos para executar queries, implementada no typeOrm. Utilizaremos o método createTable( table Table )

Table:
    É um objeto que implementa a interface Table que utilizamos para definir os campos da tabela,
    nome; --> nome da tabela
    colunas[];  --> array de objetos colunas;
        { 
            name: "nome_da_coluna",
            type: "tipo_dominio_coluna",
            isPrimarykey: true, // padrão é false, não há necessidade de escrever caso não seja.            
        },{
            name: "outra_coluna",
            type: "varchar(100)"
            required: true
        }
    chavesEstrangeiras[];



Ler artigo: https://dev.to/wandealves/migrations-com-typeorm-no-nodejs-4i80
Ler documentação: https://typeorm.io/#/migrations/using-migration-api-to-write-migrations

por fim temos: 
Arquivo Migration User:
____________________________________________________________________________
import {MigrationInterface, QueryRunner, Table} from "typeorm";

export class CreateUsers1614125509286 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.createTable(
            new Table({
                name: "users",
                columns: [
                    {
                        name: "id",
                        type: "uiid",
                        isPrimary: true
                    },
                    {
                        name: "name",
                        type: "varchar",
                    },
                    {
                        name: "email",
                        type: "varchar"
                    },
                    {
                        name: "created_at",
                        type: "timestamp",
                        default: "now()"
                    }
                ]
            } )
        )
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.dropTable( "users" );
    }

}
____________________________________________________________________________