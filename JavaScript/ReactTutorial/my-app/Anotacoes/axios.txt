____________________________________________________________Componente  AXIOS____________________________________________________________  
É um componente que possui uma interface implementada de uma API REST
    É baseado em cliente HTTP leve/simples de serviço similar com API Fetch,
        portanto é baseado em promisses então podemos tirar vantagem de async and wait
        para leituras de códigos assincronas.

    Com ele nós podemos tanto interceptar como cancelar requisições. 

    Possui estrutura de proteção na area do cliente contra Cross-site request forgery ( CRSF 
    ou XSRF ), um tipo de exploit malicioso no qual comandos não autorizados são transmitidos
    a partir de um usuário( cliente ) em que a aplicação web confia.
    Para saber mais: https://pt.wikipedia.org/wiki/Cross-site_request_forgery

    No geral o Axios possui uma API simples e facil de se usar além de fornecer os recursos
    mínimos para conexão via http.

____________________________________________________________ADICIONANDO AXIOS NO PROJETO____________________________________________________________

    #yarn:
    yarn add axios

    #npm
    npm install axios --save

____________________________________________________________REQUISICOES GET____________________________________________________________

Em um Componente de Classe ( logo possui states ) qualquer, a ideia é captar os dados via url 
utilizando o método get, associar esses dados ao estado da classe, mas para isso utilizaremos 
ele no método de ciclo de vida do Componente ( lifecycle ).

Exemplo Classe Lista de Pessoas:

import React from "react";
import axios from "axios";

export default class ListaPessoas extends React.Component {
    state = {
        pessoas: []
    
    }

    // Método de ciclo de vida para construir a classe antes de ser renderizada:
    componentDidMount(){

        // forma de chamar o método get do axios:
        axios.get( "https://jsonplaceholder.typicode.com/users" )
            .then( res => {
                const pesssoas = res.data;
                this.setState( { pessoas } );
            } );


            /*
                explicando:
                axios.get( "parametro url com protocolo http )

                    o then é porque essa captação de dados ocorre de forma assincrona.
                    .then( ( res ) => {

                        // Quando receber o parametro ( res ) fazer:
                        const pessoas = res.data // pegando os dados vindos da resposta da requisição
                    

                        // Atualizando o estado do Componente com a variavel acima
                        this.setState( {
                            pessoas 
                        } ); 

                    } );
            */

    }

    render(){
        return(
            <ul>
                { this.state.pessoas.map( pessoa => <li> { pessoa.nome } </li> ) }
            </ul>
        )
    }

}

Resumindo:
    Usando axios.get( url ) nós teremos uma promise que irá retornar um objeto como resposta.
    Como nós desejamos os dados dessa resposta, nós atribuiremos a pessoas o valor de res.data

    Nós tambem podemos receber outras informações a respeito da nossa requisição como o código do 
    status através de res.status ou mais informações dentro da requisição por res.request.

Duvidas sobre método GET:
    solicita uma representação do recurso especificado, em outras palavras
    ele capta um dado ou conjunto de dados através de uma url específica.
    fonte: https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Methods/GET

____________________________________________________________REQUISICOES POST____________________________________________________________

Nós podemos manipular outros métodos como POST e PUT de forma similar. 
Exemplificando criando um formulário que permite a um usuário preencher e enviar ( pelo método post )
para uma API:

Classe Lista Pessoa:

import React from "react";
import axios from "axios";

export default class ListaPessoas extends React.Componente {
    state = {
        nome: "",
    }

    // Captando dados fornecidos pelo input e atualizando no estado da classe
    handleChange = ( event ) => {
        this.setState( {
            nome: event.target.value 
        } );
    }

    // Manipulando o envio dos dados preenchidos no formulário ( utilizando o método POST ) 
    handleSubmit = ( event ) => {
        event.preventDefault();

        const usuario = {
            nome: this.state.nome
        };

        // Como no post enviamos dados para o servidor, os parametros dele são a url de destino e o objeto que estamos enviando.
        axios.post( "https://jsonplaceholder.typicode.com/users", { usuario } )
            .then( res => {
                console.log( res );
                console.log( res.data );
            } )

    }


    render(){
        return(
            <div> 
                <form onSubmit={ this.handleSubmit }>
                    <label>
                        Nome da Pessoa:
                        <input type="text" name="nome" onChange={ this.handleChange } />
                    </label>
                    <button type="submit"> Add </button>
                </form>
            </div>  
        )
    }

}


Resumindo:
    Utilizar o POST nos da o mesmo objeto de resposta com informações que nós conseguimos utilizar
    dentro da chamada da função "then" 

Duvidas sobre o método POST:
    Resumidamente o Método POST envia dados ao servidor.
    referencias:
        https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Methods/POST

____________________________________________________________REQUISICOES DELETE____________________________________________________________
Somos capazes de deletar itens de nossa API utilizando o método axios.delete( url )

Exemplo: Iremos deletar um usuário através de seu identificador fornecidos de um formulario.

Classe Lista de Pessoas:

import React from "react";
import axios from "axios";

export default class ListaPessoas extends React.Component {
    state = {
        id: "",
    }

    handleChange = ( event ) => {
        this.setState( {
            id: event.target.value 
        } );
    }

    handleSubmit = ( event ) => {
        event.preventDefault();

        axios.delete( `https://jsonplaceholder.typicode.com/users/${ this.state.id }` )
            .then( res => {
                console.log( res );
                console.log( res.data );
            } )
    }

}

o parametro do axios.delete() é composto por:
url + parametro de critério de exclusão do objeto em questão

e a partir da função then podemos ter acesso ao objeto resposta referente a requisição delete feita.


____________________________________________________________Instância Base____________________________________________________________
Axios nos permite definir uma instancia base na qual nós iremos definir a URL e outros elementos de configuração.

Exemplo: Criaremos um arquivo chamado api.js e exportaremos em uma nova instancia axios com esses padrões

import axios from "axios";

export default axios.create( {
    baseURL: "http://jsonplaceholder.typicode.com/"
} );

utilizando essa instancia base em um outro componente: no ListaPessoas

import API from "caminho/api.js"

export default class ListaPessoas extends React.Component {

    handleSumbit = ( event ) => {
        event.preventDefault();

        API.delete( `usuarios/${ this.state.id }` )
            .then( res => {
                console.log( res );
                console.log( res.data );
            } );
    }

}

____________________________________________________________USANDO ASYNC AND AWAIT____________________________________________________________
Ao inves de utilizarmos a função ".then" nós podemos trabalhar com promises de forma mais simples,
com async and await. 

A palavra chave await trata/resolve a promise e retorna um valor, que é atribuido a uma variavel, exemplo:

handleSubmir = async ( event ) => {
    event.preventDefault();

    // Promise é trata/resolvida e valor é inserido em resposta que é uma constante e não pode ser alterada.
    const resposta = await API.delete( `usuarios/${ this.state.id }` );

    console.log( resposta );
    console.log( resposta.data );
} 

fonte async and await: 
    https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/funcoes_assincronas

referencia axios:
    https://alligator.io/react/axios-react/
