Design Pattern: 
    Design Pattern, pela tradução: padrão de design; representa
    uma forma padronizada de estruturar o código para um determinado fim
    e através dele conseguimos garantir certas características ao código,
    como:
        - arrumado/organizado;
        - estável;
        - bem estruturado/boa arquitetura


Module Pattern ou Closure Pattern:

    Relembrando Closure:
        - Closure é uma forma de garantir atributos e métodos privados
        e métodos públicos.

Exemplo Closure:
utilizando o princípio de closure para implementar um objeto Pessoa com métodos e 
propriedades privadas:

        function Pessoa( salario ){
            
            //Variaveis e métodos privados:
            this.salario = salario;

            function setSalario( salarioNovo ) {
                this.salario = salarioNovo;
            };

            // Só posso usar internamente
            // setSalario( salario );

            // Variaveis e métodos públicos:
            return {

                //Função getSalario() é publica e pode ser executada fora do objeto pessoa
                getSalario() {
                    return salario;
                }        

            }

        }
        let luiz = new Pessoa( 2200 );

        console.log( luiz );

        // Por mais que eu consiga alterar o salario publicamente abaixo
        luiz.salario = 500;
        console.log( luiz.salario );

        // Da erro, é uma função privada
        // luiz.setSalario( 1200 );

        //A variavel privada permanece intacta
        console.log( luiz.getSalario() );

Definição do MDN de Closure:
Um Closure é a combinação de uma função agrupada( anexada ) com referencias ao seu estado
que está envolvida ( o ambiente lexico ). Em outras palavras, um Closure fornece acesso
ao escopo de uma função externa a partir de uma função interna.

Em outras palavras:
    Um Closure é uma função que permite você a ter acesso ao escopo de uma função pai, 
    mesmo que a fase de execução tenha finalizado.


O Module Pattern utiliza junto com funções Closures funções IIFE
    Lembrando IIFE:
        - É uma função em javascript que é executada assim que definida.

        É um Design Pattern também conhecido como Self-Executing Anonymous Function e contém duas 
        partes principais. 

        - A primeira é a função anônima cujo escopo léxico é encapsulado entre parênteses. Isso 
        previne o acesso externo às variáveis declaradas na IIFE, bem como evita que estas 
        variáveis locais poluam o escopo global.

        - A segunda parte corresponde à criação da expressão (), por meio da qual o interpretador 
        JavaScript avaliará e executará a função.


        Exemplo:
        ( function (){
            var nome = "Luiz";
        //    consoloe.log( nome );
        })();

        console.log( nome );    // da erro, pois a variável é local/privada dentro do escopo da 
        declaração da função

        atribuindo uma IIFE a uma variável não armazena a função em si, mas o resultado que ela 
        retorna.

        Exemplo:
        var resultado = ( function( num1, num2 ) {
            return num1 * num2;
        })( 2, 5 );

        console.log( resultado )    //resposta: 10;

        Utilizamos o IIFE para tornar o escopo interno da função inacessivel a programas externos,
        tornando variáveis e métodos privados. Apenas métodos e variáveis internos 