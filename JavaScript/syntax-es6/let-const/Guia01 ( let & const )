/*
    Variaveis let & const
*/

- Caracteristicas entre let, var e const:
    -var tem escopo de função   
        Ou seja, declarando um var em uma função, nós temos acesso a essa variável em todo o escopo da função.
        
    - com var, poderiamos tentar imprimir uma variavel antes de atribu-la um valor que o console não indicaria erro, apenas undefined. ( com o tipo de variável const não é possível, let sim ).     


    var é functionScope
        como a variavel1 foi declarada no bloco de instrução if dentro da função testeVar(),
        ela é acessível por todo o escopo desta mesma função, ao fazermos console.log( da variavel1 )
        não dá erro.

        function testeVar(){

            if( condicao === true ){
                console.log( variavel1 );
                var variavel1 = "variavel tipo var";

            }

            console.log( variavel1 );
            
        }
        
        //saida: 
        // undefined
        // "variavel tipo var"


    -let tem escopo de bloco de instrução
        Ou seja, declarando um let em uma instrução, como:
            While;
            for;
            if;
            else;
            ...

            Ela existirá apenas dentro do bloco dessas instruções.
            É alocado o espaço de memória para essa variavel let quando declarada em uma instrução
            E quando o bloco dessa instrução fecha ( "}" ), o espaço reservado para a variavel let é desalocado ( free() );

            é blockScope;
            
    - com let, se manipularmos uma variavel antes de declararmos com let, o console indicará um erro ( de que ela não foi declarada ainda ); 

        function funcaoTesteLet(){
            if( true ){

                // erro, não podemos manipular a variavel tipo let, antes de declará-la e atribui-la algum valor.
                // console.log( testeLet2 );
                let testeLet2 = "Variavel de escopo de bloco de instrução";
                
                //  Bloco de instrução if acessível para a variavel testeLet2
                // console.log( testeLet2 );

            }

            // Erro, bloco de instrução inacessível para testeLet2, variável não definida nesse bloco de instrução
            // console.log( testeLet2 );

            // escopo desse bloco de instrução esse i = 20
            let i = 20;

            for( let i = 0; i < 5; i++ ){
                // i = 0, 1, 2, 3, 4; escopo desse bloco de instrução esse i varia de 0 até 4
                console.log( i );
            }

            // volta pro bloco de instrução anterior que i = 20, cada escopo de instrução i representa uma variavel diferente, mantendo assim o seu valor de acordo com seu escopo, mesmo que o nome da variavel seja a mesma.
            console.log( i );
        }
        

    - const:
        Ela atende ao escopo da instrução, assim como let, porém
        Ao ser declarado uma constante, não podemos modificar seu valor/conteudo, const = constante.
        Se tentarmos alterar seu conteúdo, o javascript irá lancar um erro dizendo que não é possivel atribuir outro valor a essa constante.

        é blockScope igual let.

        não é possivel declarar uma constante e depois atribuir um valor a ela em outra linha do código. Sempre que declara-la deve atribuir o seu valor.


        const testeConst = 13;

        function funcaoTesteConst(){

            // console.log( testeConst2 );
            const testeConst2 = "Variavel const2";

            if( true ){
                const testeConst3 = "Variavel const3";
            }
            
            // erro, variavel testeConst3 inacessível nesse bloco de instrução. 
            // console.log( "testeConst3 ", testeConst3 );
        }

        // Erro, variável testeConst2 inacessível neste bloco de instrução.
        // console.log( "testeConst2 ", testeConst2 );


        Para mais informações:
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var

        https://www.w3schools.com/js/js_let.asp

        https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/let


        https://www.w3schools.com/js/js_const.asp

        https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/const


        https://www.alura.com.br/artigos/entenda-diferenca-entre-var-let-e-const-no-javascript