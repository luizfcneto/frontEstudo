Instalando Dependencias do Redux e Redux-React no script dev:
    npm i --save-dev react-redux@5.0.2 redux@3.6.0

Instalando através do NPM:
npm install redux

Instalando através do Yarn:
yarn add redux

Motivação para criação do Frameword do Redux:
    - Como requisitos para aplicações de single-page em js ficaram cada vez mais complicadas
    o Redux gerencia mais states do que anteriormente. 
        Esse state inclui respostas de servidores e dados cacheados, assim como dados criados 
        localmente que ainda não foram persistidos no servidor. 

        A Interface do state está também aumentando em complexidade, assim como precisamos gerenciar
        rotas ativas, abas selecionadas, spinners, conrtoladores de paginação e mais... 

    - Gerenciar o state em constante mudança é difícil em grandes projetos. Se um Componente pode
    atualizar outro Componente, então uma exibição pode atualizar um Componente, que por sua vez 
    atualiza outro Componente, consequentemente fazendo com que outra exibição seja atualizada.
        
        A partir de um ponto, nós não saberemos mais o que acontece em nossas aplicações então
        perderá o controle de como, porque e como o state é modificado. 

    - E se não for ruim ao bastante, considere novos requisitos se tornando comuns no desenvolvimento
    do front-end. Como desenvolvedores, nós esperamos manipular atualizações otimistas, renderização
    no server-side, captando dados antes de realizar transições de rotas e assim por diante.
        
        Nós nos deparamos tentando gerenciar uma complexidade que antes nunca tivemos que lidar, 
        e inevitavelmente fazemos a seguinte pergunta: é hora de desistir? R: NÃO!

    - Essa complexidade é dificil de lidar como misturamos dois conceitos que são muito dificeis para
    a mente humana pelo seguinte motivo: Mutações e assincronia. Eu chamo de Mentos e Coca. Ambos
    podem ser ótimos separadamente, mas juntos eles criam um caos/desordem
        
        Bibliotecas como React dispoem de resolver o problema na camada de visualização removendo
        tanto a assincronia quanto a manipulação direta do DOM. Entretanto, gerenciar o states 
        dos seus dados são muito para ele. Aí que o Redux entra.

    - Seguindo os passos de Flux, CQRS, e Event Sourcing ( fornecimento de eventos ), Redux se dispõe
    para fazer mutações de stats previsíveis impondo certas restrições e como essas atualizações 
    devem ser feitas. Essas restrições são refletidas nos três principios do Redux.


OS 3 Principios do REDUX:
    1. Fonte Unica da verdade ( Single source of thruth ) - algo como um lugar único em que podemos confiar
        - Basicamente o estado ( state ) da aplicação toda é armazenada em uma arvore de objetos
        chamada de store ( loja ).

        Isso torna a criação universal da aplicação mais fácil.
        - Assim que o state vem do servidor pode ser serializado ( serialized ) e fornecido/entregue 
        para o cliente sem nenhum código extra.

        - Uma unica arvore de states é mais simples de debugar ou inspecionar na aplicação.

        - Também nos permite peresistir o state da aplicação em desenvolvimento, ajudando no desenvolvimento
        ágil. 

        - Algumas funcionaliades que são dificeis de implementar, como desfazer e refazer são mais 
        triviais de fazer se todo o state é armazenado em uma única arvore.

        Podemos vizualiza-lo atráves do método store.getState();



    2. State é apenas leitura ( read-only ) não podemos alterar seu conteúdo.
        A única forma de modificarmos um state é emitindo uma action ( ação ) com um objeto descrevendo
        o que aconteceu.

        - Isso assegura que nem as exibições, nem as chamadas callback de rede irão escrever diretamente
        os states. Ao invés disso nós expressamos a intenção de transformar o state. Porque todas as 
        alterações são centralizadas e ocorrem uma a uma em ordem estrita.

        As actions ( ações ) são apenas objetos simples, eles podem ser logados, armazenados e depois 
        substituidos para debugging ou propósitos de testes.

        Para emitirmos uma action utilizamos o método dispatch ( contendo o objeto que desejamos modificar )
        método: store.dispatch( objeto )

        OBS: Toda ACTION TEM DE TER UMA PROPRIEDADE/ATRIBUTO CHAMADA TYPE QUE DESCREVE A AÇÃO QUE SERÁ REALIZADA
        Exemplo:
        store.dispatch( {
            type: 'COMPLETE_TODO',
            index: 1
        } )

        store.dispatch( {
            type: 'SET_VISIBILITY_FILTER',
            filter: 'SHOW_COMPLETED'
        } )

    3. Mudanças são realizadas por funções puras.
        Para especificar como a arvore de states é transformada por ações nós escrevemos funções puras ( reducers )
        
        - Reducers são funções puras, que recebem um state prévio e uma ação, e retorna o próximo state ( state modificado ).
        OBS: Lembrar de sempre retornar novo state de objetos, ao invés de modificar o state prévio.

        - Podemos começar com um único reducer, e a medida que aplicação ganha grandes proporções, separamos eles
        em reducers menores que gerenciam partes específicas da arvore de states.

        - Pelo fato de reducers serem apenas funções, nós podemos controlar a ordem em que cada uma é chamada,
        passar dados adicionais, ou então tornar reducers reutilizaveis para tarefas comuns como paginação.

        Exemplo:
        function visibilityFilter( state = 'SHOW_ALL', action ) {
            switch ( action.type ) {
                case 'SET_VISIBILITY_FILTER':
                return action.filter
                default:
                return state
            }
        }
        
        function todos(state = [], action) {
            switch (action.type) {
                case 'ADD_TODO':
                return [
                    ...state,
                    {
                    text: action.text,
                    completed: false
                    }
                ]
                case 'COMPLETE_TODO':
                return state.map((todo, index) => {
                    if (index === action.index) {
                    return Object.assign({}, todo, {
                        completed: true
                    })
                    }
                    return todo
                })
                default:
                return state
            }
        }
        
        import { combineReducers, createStore } from 'redux'
        const reducer = combineReducers({ visibilityFilter, todos })
        const store = createStore(reducer)











--- reducers são funções puras. ( relembrando no final do components-props.txt )
    combineReducers e createStore são métodos/funções de Redux

    Provider é um componente de React-Redux


Referencias:
    https://css-tricks.com/learning-react-redux/
    https://medium.com/@rajaraodv/using-middlewares-in-react-redux-apps-f7c9652610c6
    https://redux.js.org/
