states: 
    É uma variável ( objeto ) que representa o estado de um componente;

    Esse estado é nada mais nada menos que um conjunto de variaveis encapsuladas e privadas;
    são declaradas/fornecidas ao Componente.

State e LifeCycle:
Considerando um exemplo de um relógio nós apenas aprendemos uma forma de atualizar a interface do usuario ( UI ).
Nós chamamos o ReactDOM.render() para modificar a saida renderizada:
//ES5
function tick(){
    const element = (
        <div>
            <h1> Hello, World </h1>
            <h2> It is { new Date().toLocaleTimeString() } </h2>
        </div>
    );
}


    ReactDOM.render(
        element,
        document.getElementById( "root" )
    );
}

setInterval( tick, 1000 );


Aqui nós iremos aprender como nós iremos fazer o Componente Clock verdadeiramente reutilizavel e encapsulado.
Ele configurará seu proprio timer e atualizará a cada segundo.

Primeiramente vamos começar a encapsular como o Clock aparenta:
//ES5
function Clock( props ){
    return (
        <div>   
            <h1> Hello, World </h1>
            <h2> It is { props.date.toLocaleTimeString() } </h2>
        </div>
    );

}

function tick(){
    ReactDOM.render(
        <Clock date={ new Date() } />,
        document.getElementById( "root" )
    );
}

setInterval( tick, 1000 );

Contudo, ainda falta um requisito crucial: O fato de Clock setar um timer e atualizar a interface do usuario ( UI )
todo segundo deve ser uma implementação caracteristica de Clock.

Idealmente nós queremos declarar Clock uma vez e fazer com que ele mesmo se atualize, ficando dessa forma:

ReactDOM.render(
    <Clock />,
    document.getElementById( "root" )
);

Para implementar isso, nós devemos adicionar "state" ( Estado ) ao componente de Clock.

State é similar a props, mas é privado e completamente controlado pelo Componente.

____________________________________________________________CONVERTENDO FUNÇÃO PARA CLASS____________________________________________________________
Nós podemos converter uma função componente de Clock para class em 5 passos:
    1- Criar uma classe ( formato ES6 ), com o mesmo nome, que extenda React.Component;

    2- Adicionar um único método vazio chamado render()

    3- Mover o corpo da função para dentro do método render()

    4- Renomear props para this.props dentro do corpo de render()

    5- Deletar a declaração da função que não será mais utilizada. 

Ficando dessa forma:

class Clock extends React.Component{
    render(){
        <div>
            <h1> Hello, World </h1>
            <h2> It is { this.props.toLocaleTimeString() } </h2>
        </div>        
    }    
}

O método render() será chamado cada vez que uma atualização no Componente acontecer, mas toda vez que nós renderizamos <Clock /> no mesmo nó DOM,
somente uma instancia de Clock será usada.

____________________________________________________________ADICIONANDO STATE LOCAL PARA A CLASSE____________________________________________________________

1. Criamos um método de construtor da Classe do Componente Clock
2. Modificamos a referencia do this.date.toLocaleTimeString() no método retorne para referenciar pelo state.

class Clock extends React.Component{
    
    // [1] -> OBS: Classes de Componentes devem sempre chamar o método construtor com props
    constructor( props ){
        super( props );
        this.state = { date: new Date() };
    }


    render(){
        return(
            <div>
                <h1> Hello, World </h1>
                
                // [2]
                <h2> It is { this.state.date.toLocaleTimeString() } </h2>
            </div>
        );
    }
}

ReactDOM.render(
    <Clock />,
    document.getElementById( "root" );
)

____________________________________________________________ADICIONANDO METODOS DE CICLO DE VIDA NA CLASSE____________________________________________________________
Em aplicações com muitos componentes, é muito importante se livrar de recursos pegos pelos componentes quando eles forem destruidos.

Nós queremos configurar um timer sempre que o Componente Clock é renderizado pelo DOM pela primeira vez. Isso é chamado de "mounting" ( montagem ) no React.

Nós também queremos limar o timer sempre que o DOM produzido pelo Componente Clock é removido. Isso é chamado de "unmounting" ( Desmontagem ) no React.

Nós devemos declarar métodos especiais em Classes de Componentes para executar algum código quando ele monta ou desmonta:

class Clock extends React.Component{
    constructor( props ){
        super( props );
        this.state = { date: new Date() };
    }

    componentDidMount(){

    }

    componentWillUnMount(){

    }

    render(){
        return(
            <div> 
                <h1> Hello, World </h1>
                <h2> It is { this.state.date.toLocaleTimeString() } </h2>
            </div>
        );
    }
}

Esses métodos são chamados de métodos de ciclo de vida ( lifecycle methods )

O método componentDidMount() executa depois que a saida do componente foi renderizada pelo DOM. Esse é um ótimo lugar para configurar o timer:

componentDidMount(){
    this.timerID = setInterval( () => this.tick(), 1000 );
}

Note que nós salvamos o timer ID diretamente no this ( this.timerId );
Enquanto o this.props é configurado pelo próprio React e this.state tem um significado especial, nós somos licres para adicionar campos adicionais
na classe manualmente se necessitarmos armazenar algo que não participe do fluxo de dados ( data flow ) como o timerID.


Vamos derrubar o temporizador ( timer ) no método de lifecycle componentWillUnMount():
componentWillUnMount(){
    clearInterval( this.timerID );
}

Finalmente, podemos implementar o método chamado tick() que será executado pelo Componente Clock a cada segundo 

Usamos o this.setState() para agendar a atualização para o state local do Componente

No final teremos isso:
class Clock extends React.Component{

    constructor( props ){
        super( props );
        this.state = { date: new Date() };
    }

    componentDidMount(){
        this.timerID = setInterval( () => this.click, 1000 );
    }

    componentWillUnMount(){
        clearInterval( this.timerID );
    }

    tick(){
        this.setState( {
            date: new Date()
        } );
    }

    render(){
        return(
            <div> 
                <h1> Hello, World </h1>
                <h2> It is { this.state.date.toLocaleTimeString() } </h2>
            </div>
        )
    }
}

ReactDOM.render(
    <Clock/>,
    document.getElementById( "root" )
);

Resumo da ordem de chamada dos métodos:
    1- Quando <Clock /> é passado para o ReactDOM.render(), o React chama o construtor do componente Clock;
        Como ele precisa exibir a hora corrente, ele inicializa this.state ( estado ) com um objeto incluindo a hora atual;
        Nós iremos futuramente atualizar esse state ( estado )

    2- React chama o método render do componente Clock. É dessa forma que o React sabe o que deve ser exibido na tela;
        React atualiza o DOM para corresponder com a saida do render do componente Clock
    
    3- Quando a saida do componente Clock é inserida no DOM, React chama o método de lifecycle ( ciclo de vida ) componentDidMount();
        Dentro dele o componente Clock pede ao browser para configurar um timer para chamar o método tick() a cada segundo.

    4- A cada segundo o Browser chama o método tick(). Dentro dele, o componente Clock agenda uma atualização da interface do Usuario ( UI )
        chamando o método setState() com um objeto contendo a hora corrente. Graças à chamada ao método setState(), React sabe que o 
        estado foi alterado, e chama novamente o método render() para atualizar o que deve ser exibido na tela. Essa hora, o this.state.date
        no método render() será diferente, então a saida de render será um tempo atualizado. Assim, o React atualiza o DOM adequadamente.

    5- Se o component Clock é sempre removido do DOM, React chama o método lifecycle ( ciclo de vida ) componentWillUnmount() então o 
        timer é parado.


____________________________________________________________USANDO STATE ADEQUADAMENTE____________________________________________________________
Coisas que devemos saber sobre o setState():
    - Não modifique o state diretamente:
    ex: 
        this.state.comment = "Hello";

    - Utilize o método setState() sempre que for altera-lo:
    ex:
        this.setState( {
            comment: "Hello"
        } );

    OBS: O Unico lugar onde voce deve atribuir state é no método construtor do Componente


____________________________________________________________ATUALIZACAO DO STATE DEVE SER ASSINCRONO____________________________________________________________
React pode agrupar multiplas chamadas ao setState() em uma única atualização por desempenho

Pelo fato do this.props e this.state serem atualizados assincronamente, nós não devemos confiar em seus valores para calcular o próximo estado.

exemplo: este código irá falhar para atualizar o contador
this.setState( {
    contador: this.state.contador + this.props.increment,
} );

Para ajeitar isso, usamos uma segunda forma de setState() que aceita uma função ao invés de um objeto. Então a função irá receber como parametro
o state e o props, para que contador seja efetivamente atualizado:

//com arrow function:
this.setState( ( state, props ) => ( {
    contador: state.contador + props.increment
} ) );

//sem arrow function:
this.setState( function( state, props ) {
    return {
        contador: state.counter + props.increment
    };
} );

____________________________________________________________ATUALIZAÇÃO DO STATES É MESCLADA ( MERGED )____________________________________________________________ 
Quando nós chamamos setState(), React mescla( merge ) o objeto que fornecemos como um estado corrente.

Exemplo: 
constructor( props ){
    super( props );
    this.state = {
        posts: [],
        comments: []
    };
}

Então podemos atualiza-los indenpendentemente com chamadas separadas de setState():
componentDidMount(){
    fetchPosts().then( response => {
        this.setState( {
            posts: response.posts;
        } );
    } );

    fetchComments().then( response => {
        this.setState( {
            comments: response.comments;
        } );
    } );

}

A mesclagem ( o Merging ) é superficial, então this.setState( { comments } ) deixa this.state.post intacto, mas altera completamente this.state.comments;

____________________________________________________________DADOS FLUEM PARA BAIXO____________________________________________________________
Nenhum componente pai ou filho conseguem saber se um certo componente possui estado ( state ) ou não, e eles não se importam também se ele é definido
em formato de classe ou função

Isso é o porque do state é sempre chamado de local ou encapsulado. Ele não é acessível a outro componente além do próprio em que é definido.

O componente pode escolher passar seu state ( estados ) para componentes filhos como um props
exemplo:
<h2> It is { this.state.date.toLocaleTimeString() }. </h2>

Isso também funciona para componentes definidos por usuarios ( user-defined ):
<FormattedDate date={ this.state.date } />

O componente FormattedDate deverá receber o date como um props e não saberá de onde ele veio, se veio de state ( estado ) do Componente Clock, 
ou se veio do props de Clock, ou se foi digitado manualmente:
function FormattedDate( props ){
    return <h2> It is { props.date.toLocaleTimeString() }. </h2> 
}

Isso é commumente chamado de "Top-down" ( descendente ) ou fluxo de dados "unidirecional" ( unidirectional data flow ). Qualquer state sempre pertence a algum 
um Componente especifico, e qualquer dado ou interface do usuario ( UI ) derivada desse state podem afetar apenas componentes abaixo/subordinados/filhos 
a eles na arvore.

Se voce imaginar uma arvore de componentes como uma cascata de props, o state de cada Componente é como uma fonte de agua adicional que se junta/une
em algum ponto arbitrário mas continua seguindo o fluxo da água para baixo;

Para mostrar que todos os componentes são completamente isolados, nós podemos criar um Componente App que renderiza três componentes Clock:

function App(){
    return(
        <div>
            <Clock />
            <Clock />
            <Clock />
        </div>
    );
}

ReactDOM.render(){
    <App />,
    document.getElementById( "root" );
}

Cada Componente Clock é configurado pelo seu próprio timer e atualiza de forma independente.

Em aplicações React, seja o Componente com state ou sem é considerado uma implementação detalhada do Componente
e pode ser alterado a todo tempo. Nós podemos utilizar componentes sem state dentro de Componentes com state e vice e versa.



Referencia: https://reactjs.org/docs/state-and-lifecycle.html