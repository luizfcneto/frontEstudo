Criando um arquivo package.json:
    npm init -y

Instalando Dependencia do WebPack no projeto:
    npm i --save-dev webpack@1.14.0 webpack-dev-server@1.16.2

arquivo de configuração do webpack: webpack.config.js

const webpack = require('webpack')
const ExtractTextPlugin = require('extract-text-webpack-plugin')

module.exports = {
    entry: './src/index.jsx',
    output: {
        path: __dirname + '/public',
        filename: './app.js'
    },
    devServer: {
        port: 8080,
        contentBase: './public',
    },
    resolve: {
        extensions: ['', '.js', '.jsx'],
        alias: {
            modules: __dirname + '/node_modules'
        }
    },
    plugins: [ 
        new ExtractTextPlugin('app.css')
    ],
    module: {
        loaders: [{
            test: /.js[x]?$/,
            loader: 'babel-loader',
            exclude: /node_modules/,
            query: {
                presets: ['es2015', 'react'],
                plugins: ['transform-object-rest-spread']
            }
        }, {
            test: /\.css$/,
            loader: ExtractTextPlugin.extract('style-loader', 'css-loader')
        }, {
            test: /\.woff|.woff2|.ttf|.eot|.svg*.*$/,
            loader: 'file'
        }]
    }
}

referencias:
    https://webpack.js.org/


BABEL: Serve para o browser interpretar os arquivos jsx de forma nativa, então é necessário 
fazer uma transpilação do nosso código jsx para código js.
Instalando dependencias do Babel:
    npm i --save-dev babel-core@6.22.1 babel-loader@6.2.10 babel-plugin-react-html-attrs@2.0.0 babel-plugin-transform-object-rest-spread@6.22.0 babel-preset-es2015@6.22.0 babel-preset-react@6.22.0

    npm i --save-dev extract-text-webpack-plugin@1.0.1 css-loader@0.26.1 style-loader@0.13.1 file-loader@0.9.0

    npm i --save-dev bootstrap@3.3.7 font-awesome@4.7.0

    npm i --save-dev react@15.4.2 react-dom@15.4.2 react-router@3.0.2 axios@0.15.3

Alterando "scripts" de package.json:
    "dev": "webpack-dev-server --progress --colors --inline --hot"
    "production": "webpack --progress -p"