Babel:
    Babel é uma ferramenta que é usada principalmente para converter códigos ECMAScript 2015+ ( ES06+ ) para versões anteriores de Javascript compatíveis com Browsers ou ambientes antigos. 

    Principais funcionalidades do Babel:
        1. Transformação de sintaxe;
        2. Características ( features ) de Polyfill ( Uma forma de preenchimento múltiplo ) que estão faltando no ambiente alvo ( através do @babel/polyfill );
        3. Transformações de código fonte ( codemods );
        e outros.

        Exemplo, código Javascript Abaixo:
            // Código de entrada do Babel ( ES06 - ES2015 ) com arrow function
            [ 1, 2, 3 ].map( n => {
                n + 1;
            } ) 

            // Código de saída gerado pela transformação do Babel na versão equivalente ( ES5 - ES2014 ):
            [ 1, 2, 3 ].map( function( n ) {
                return n + 1;
            } )

    Babel suporta transformações de sintaxe até a ultima versão lançada do Javascript.

    Esses plugins permitem que nós usemos a nova sintaxe, sem esperar o suporte do Browser. 
    Para mais informações de uso:
        - https://babeljs.io/docs/en/usage

    
    JSX e React:
        Babel consegue converter sintaxe JSX. 
        Cheque mais o React predefinindo ( preset ) e como utiliza-lo em:
            - https://babeljs.io/docs/en/babel-preset-react

        É recomendado utilizar juntamente com pacote "babel-sublime" para levar a sintaxe de sublinamento para outro nível. Saiba mais em: https://github.com/babel/babel-sublime

        Instalando o babel-preset-react:
        npm install @babel/preset-react --save-dev

        adicione o @babel/preset-react no arquivo de configuração do babel.
        Exemplo de código JSX:
            export default React.createClass( {
                getInitialState() {
                    return { 
                        num: this.getRandomNumber() 
                    }
                }

                getRandomNumber(){
                    return Math.ceil( Math.random() * 6 );
                }

                render(){
                    return 
                        <div>
                            Rolamento do dado: { this.state.num } 
                        </div>
                }

            } );
    
    Type Annotations ( Flow e TypeScript ):
        Babel consegue retirar type annotations. 
        Saiba mais em: 
            - Flow preset:
                https://babeljs.io/docs/en/babel-preset-flow

            - TypeScript preset:
                https://babeljs.io/docs/en/babel-preset-typescript
        
        Saiba que Babel não faz checagem de tipo;
        Nós temos que instalar os presets acima para checar os tipos.

        Instalando o flow-preset:
        npm install @babel/preset-flow --save-dev

        Código Javascrit utilizando notação flow:
        // @flow
        function quadrado( n: number ): number {
            return n * n;
        }

        Instalando o typescript-preset:
        npm install @babel/preset-typescript

        Código Javascript utilizando notação typescript:
        function cumprimentar( cumprimento: string ){
            this.cumprimento = cumprimento;
        }

        Saiba mais sobre:
            - Flow: https://flow.org/

            - TypeScript: https://www.typescriptlang.org/

    Pluggable ( Plugável ):
        Babel é construido por plugins. Construa seu próprio formato de transformação utilizando plugins já existentes ou crie o seu próprio. Utilize facilmente um conjunto de plugins ou criando um preset. 
        Saiba mais em: https://babeljs.io/docs/en/plugins

        Exemplo:
        Criando um plugin rapidamente com "astexplorer.net" ou use generator-babel-plugin ( gerador de plugin babel ) para gerar um template de plugin.

        Código js:
            // Um plugin é apenas uma função:
            export default function( { types: t } ){
                return {
                    visitante: {
                        Indentifier( path ){
                            let nome = path.node.nome; 
                            path.node.nome = nome.split( "" ).reverse().join("");
                        }
                    }
                }
            })

    Debuggable ( Debugável ):
        Tem suporte do Source Map ( mapeamento da fonte ), então podemos debugar o código compilado com facilidade.

    Spec Copliant ( Compatível com especificações ):
        Babel tenta se manter fiel ao padrão ECMAscript, tanto quanto razoavelmente possível. Ele também permite ter opções de especificação para mais ser mais compatível com especificações para uma melhor performance de troca.

    Compact ( Compacto ):
        Babel tenta utilizar a menor quantidade de código possível, sem dependência em um tempo de execução volumoso.

        Isso pode ser dificil de se fazer em alguns casos, e possui opções "soltas" para transformações específicas que podem comprometer a compatibilidade de especificações quanto à legibilidade, tamanho de arquivo e velocidade.


    Guia de como compilar o código de uma aplicação Js que usa sintaxe ES2015+ ( ES06+ ) para código que trabalham em browsers atuais. Isso irá envolver tanto transformação de sintaxe, quanto uso de polyfill para caracteristicas/propriedades que faltam.

    1. Executar os comandos abaixo para instalar os pacotes:
        npm install @babel/core @babel/cli @babel/preset-env --save-dev
        npm install @babel/polyfill --save

    2. Criando um arquivo de configuração do Babel na pasta raiz do projeto: babel.config.json:
        {
            "presets":[
                "@babel/env",
                {
                    "targets": {
                        "edge": "17",
                        "firefox": "60",
                        "chrome": "67",
                        "safari": "11.1",
                    },
                    "useBuiltIns": "usage",
                    "corejs": "3.6.4",
                }
            ]
        }

    A lista de browser acima foi um exemplo arbitrário. Você terá que adapta-lo para os Browsers que você deseja ter suporte.

    3. Executando o comando abaixo para compilar todo o seu código da pasta "src" para "lib":
    ./node_modules/.bin/babel src --out-dir lib

    OBS:
        Você consegue usar o pacote do npm "runner" que veio na versão npm@5.2.0 para diminuir o comando substituindo ./node_modules/.bin/babel por npx babel

    Uso básico do CLI ( command line interface - interface de linha de comando ):
        Todos os módulos do Babel que você irá precisar estão publicados como pacotes separados do npm pelo escopo @babel ( desde a versão 7 ). Esse design modular permite que varias ferramentas sejam planejadas para um caso de uso específico. Vamos ver agora sobre o @babel/core e @babel/cli:
    
        @babel/core: Nucleo da Biblioteca:
            O nucleo de funcionalidades do babel se encontra no módulo @babel/core. 
        
            Instalando o módulo @babel/core:
            npm install @babel/core --save-dev

            Após isso nós somos capazes de importar diretamente no nosso programa javascript e usá-lo da seguinte forma:
                "arquivo.js":
                    const babel = require( "@babel/core" );

                    babel.transform( "code", optionsObject );

            Como um usuário final, nós provavelmente iremos querer instalar outras ferramentas que servem como interface para o @babel/core e o integra bem com o nosso processo de desenvolvimento. A documentação nos ensina melhor como utilizar essas opções de integrações com outras ferramentas e como configura-las.

        @babel/cli: Ferramenta que nos permite utilizar o babel via terminal, por linha de comando. 

            Instalando o @babel/cli e o @babel/core ( pre requisito para utilizar a ferramenta @babel/cli ):
            npm install @babel/core @babel/cli --save-dev

            O comando abaixo irá analisar todo código do arquivo javascript na pasta "src", adicionar qualquer transformação que nós iremos informa-lo, e cada arquivo de saida para o diretório "lib". Caso nós não tenhamos informado para aplicar transformação ainda, o código de saída será identico ao de entada ( estilo de código não é preservado ). Nós podemos especificar as transformações que queremos passando como opções( options ).

            ./node_modules/.bin/babel src --out-dir lib

            Nós usamos a opção "--out-dir" acima. Nós podemos visualizar o restante de options que são aceitas pela ferramenta "cli" usando --help. Mas os mais importante para nós são --plugins e --presets.

    Plugins & Presets:
        Como vimos anteriormente, transformações vem em forma de plugins, que são pequenos programas de Js ( funções ) que dão instrução ao Babel em como irá realizar as transformações no código. Uma vez que nós podemos escrever nossos próprios plugins e adiciona-los quaisquer transformações que quisermos no nosso código. 

        Para transformar sintaxe ES2015+ ( ES06+ ) para ES5, nós podemos contar com o plugin oficial @babel/plugin-transform-arrow-functions:
        
        instalando plugin @babel/plugin-transform-arrow-functions:
            npm install @babel/plugin-transform-arrow-functions --save-dev

            & 

            ./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions

        Agora qualquer arrow function utilizada no nosso código será transformado para expressões de função compativel na versão ES05:
            exemplo:
            // código ES06:
            const funcao = () => 1;

            // código acima transformado para código ES05:
            var funcao = function funcao(){
                return 1;
            };

        Existem outras features ( características ) ES2015+ que desejamos serem transformadas. Ao invés de termos de adicionar todos os plugins que quisermos um a um, nós podemos utilizar um "preset" que consiste em um conjunto de plugins pré-definido.

        Assim como plugins, nós podemos criar nossos próprios presets e compartilha-los com qualquer combinação de plugins que precisarmos. Para esse caso de uso existe o preset "env".

        instalando o preset "env":
        npm install @babel/preset-env --save-dev

        ./node_modules/.bin/babel src --out-dir lib --presets=@babel/env

        Sem nenhuma configuração, esse preset irá incluir todos os plugins que fornecem suporte às versões js ( ES06, ES07, ES08, ... ). Mas presets podem ter options também. Ao invés de passarmos tanto cli quanto preset options pelo terminal, nós iremos ver uma outra forma de configurarmos, através dos arquivos de configuração.

    Configuração:
        Existem algumas formas diferentes de arquivos de configuração dependendo do que nós precisamos. 

        Vimos esse exemplo de arquivo de configuração padrão no ponto 2 de característica do Babel, o exemplo padrão usando o preset env é o mesmo, para mais informações aprofundadas olhar: https://babeljs.io/docs/en/configuration

        Muitos outras ferramentas possuem configurações similares ao Babel, como ESLint ( .eslintrc ), Prettier( .prettierrc ).

        Todas as options ( https://babeljs.io/docs/en/options ) da API do Babel são permitidas. Entretanto, se a option exige Javascript, você deverá utilizar um arquivo de configuração de Javascript. ( https://babeljs.io/docs/en/config-files ). Vai depender do seu caso;

        Qual é o seu caso?
            - Está usando um monorepo? ( repositório único )
            - Você deseja compilar o "node_modules"?

            Se for esse o caso, o babel.config.json é o indicado.

            Crie um arquivo chamado babel.config.json com o seguinte conteudo na pasta raiz do seu projeto ( onde tem o arquivo package.json ):
                arquivo: babel.config.json
                {
                    "presets": [ ... ],
                    "plugins": [ ... ]
                }


                arquivo: arquivo.js:
                module.exports = function ( api ) {
                    api.cache( true );

                    const presets = [ ... ];
                    const plugins = [ ... ];

                    return {
                        presets,
                        plugins
                    };
                }

            cheque mais em documentação da configuração do babel.config.json em: https://babeljs.io/docs/en/config-files#project-wide-configuration



            - Você tem uma configuração que é aplicada apenas em uma pequena parte do seu projeto?

            Se for esse o caso, .babelrc.json é o indicado.

            Crie um arquivo chamado .babellrc.json com o seguinte conteudo no seu projeto:
                arquivo: .babelrc.json
                {
                    "presets": [ ... ],
                    "plugins": [ ... ]
                }
            para mais informações veja a documentação do arquivo .babelrc.json em: https://babeljs.io/docs/en/config-files#file-relative-configuration


        Também podemos escolher especificar nosso arquivo de configuração .babelrc.json pelo package.json usando a palavra chave "babel" como a seguir:
            arquivo: package.json
            {
                "name": "my-package",
                "version": "1.0.0",
                "babel": {
                    "presets": [ ... ],
                    "plugins": [ ... ],
                }
            } 

        Também podemos escrever os arquivos de configuração "babel.config.json" e ".babelrc.json" utilizando Javascript:
            arquivo: arquivo.js
            const presets = [ ... ];
            const plugins = [ ... ];

            module.exports = {
                presets,
                plugins
            }
        Nós temos permissão para acessar qualquer API do Node.js. Exemplo uma configuração dinamica baseada em processo ambiente:
            arquivo.js: 
            const presets = [ ... ];
            const plugins = [ ... ];

            if( process.env[ "ENV" ] === "prod" ){
                plugins.push( ... );
            }

            module.exports = {
                presets,
                plugins
            }

        Leia mais em: https://babeljs.io/docs/en/config-files

        Utilizando o CLI: @babel/cli 
            babel --plugins @babel/plugin-transform-arrow-functions script.js

            veja mais na documentação:
                https://babeljs.io/docs/en/babel-cli

        Utilizando a API ( @babel/core ):
            arquivo.js:
                require( "@babel/core" ).transform( "code" , {
                    plugins: [ "@babel/plugin-transform-arrow-functions" ]
                });

            veja mais na documentação:
            https://babeljs.io/docs/en/babel-core


    Polyfill: 
        O módulo @babel/polyfill inclui "core-js" e "regenerator runtime" customizado/personalizado para emular completamente os ambientes ES06+.

        Isso nos permite usar novas construções como "Promise" ou "WeakMap", métodos estáticos como "Array.from()" ou "Object.assign()", instanciar métodos como "Array.prototype.includes()", e geradores de funções ( quando utilizamos em conjunto com um plugin regenerator ). O polyfill adiciona ao escopo global bem como prototipos nativos ( native prototypes ) como String  para fazer isso.

        Para autores de Library/Tool ( bibliotecas/ferramentas ) isso pode ser demais. Se você não precisa instanciar métodos como "Array.prototype.includes()" você consegue fazer sem poluir o escopo global completamente, usando o plugin "transform runtime" transformador em tempo de execução" ao invés do @babel/polyfill.

        Indo adiante, se você sabe exatamente quais features ( caracteristicas ) que voce precisa usar o polfill, você pode importa-lo diretamente do "core-js".

        instalando o módulo polyfill:
        npm install @babel/polyfill --save

        OBS: Instalamos o polyfill em outra propriedade de dependencia porque o polyfill precisa ser executado antes do código fonte. Aparentemente, essa era a diferença de propriedade de dependencia do package.json ( DevDependencies x Dependencies )

        Como nós usamos o preset "env" que possui uma option "useBuiltIns" que quando configurado para "usage" irá praticamente aplicar a otimização mencionada acima onde você apenas inclui o polyfill quando necessário. Com essa option a configuração fica dessa forma:

        arquivo babel.config.json:
        {
            "presets": [
                "@babel/env",
                {
                    "targets":{
                        "edge": "17",
                        "firefox": "60",
                        "chrome": "67",
                        "safari": "11.1"
                    },
                    "useBuiltIns": "usage"
                }
            ]
        } 
        Babel apartir de então, irá inspecionar todo o seu código por características ( propriedades ) que estão faltando no seu ambiente alvo e incluir somente o polyfill requisitado.
        
        Exemplo:    arquivo.js:
            Promise.resolve().finally();

        O navegador Edge 17 não tem Promise.prototype.finally, então modificará para:
            require( "core-js/modules/es.promise.finally" );
            Promise.resolve().finally();

        Se nós não estivessemos utilizando o preset "env" com a option "useBuiltIns" configurado "usage" o Babel iria exigir o polyfill completo apenas uma vez pelo ponto de entrada antes de qualquer código.


        https://babeljs.io/docs/en/usage
        
instalar babel-loader:
npm install babel-loader

é configurado no webpack.


Referências:
    - https://babeljs.io/docs/en/
