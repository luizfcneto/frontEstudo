Migration:
    Superficialmente É um histórico de alterações e criações de tabelas de banco de dados que foram executadas no projeto para que todos os usuários/desenvolvedores tenham acesso ao "mesmo" banco de dados ao inicalizar a aplicação.

https://cloud.google.com/solutions/database-migration-concepts-principles-part-1#:~:text=Database%20migration%20is%20the%20process,restructured%2C%20in%20the%20target%20databases.

0 - Utilizaremos o cli do  TypeORM para fazer as migrations
    Como já configuramos o TypeORM previamente, já temos a dependencia dele instalado no nosso projeto.

    CLI é um acronimo para Command Line Input. No nosso caso, utilizaremos linhas de comando para criar as migrations no nosso projeto.


    

1 Passo: Criar um comando de uma migration:
    no package.json, no atributo "scripts" que faça o comando:
    "typeorm": "ts-node-dev node_modules/typeorm/cli.js"


2 Passo: Olhar documentação para criar migrations:
    https://typeorm.io/#/migrations

    adicionar no script do package.json:
    "scripts": {
        "typeorm": "node --require ts-node/register ./node_modules/typeorm/cli.js"    
    }

    Comando para executar o script typeorm:
    npx typeorm

    Comando para criar uma nova migration:
    npx typeorm migration:create -n "NomeMigration"
    // Comando acima irá criar o arquivo de migration na raiz do projeto. Para definirmos qual pasta de destino, devemos incluir no arquivo ormconfig.json a propriedade:
    "cli": {
        "migrationsDir": "./src/diretorio-destino"
    }

    fonte: https://github.com/typeorm/typeorm/blob/master/docs/using-cli.md#create-a-new-migration
    
    Comando para executar as migrations que criamos:
    npm run typeorm migration:run

    Utilizaremos o software Beekeeper para monitorar as migrations Criadas e executadas pelo comando acima. 

    Comando para desfazer a ultima execução de migration executada:
    npm run typeorm migration:revert